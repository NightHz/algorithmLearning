algorithm learning...
---- test sort_insertion ----
input_n: 10
input: 4 7 3 6 9 1 0 4 6 4 
output: 0 1 3 4 4 4 6 6 7 9 
---- test sort_merge ----
input_n: 10
input: 4 7 3 6 9 1 0 4 6 4 
output: 0 1 3 4 4 4 6 6 7 9 
---- test find_maximum_subarray ----
input_n: 16
input: 13 -3 -25 20 -3 -16 -23 18 20 -7 12 -5 -22 15 -4 7 
left: [7]18
right: [10]12
sum: 43
---- test Heap ----
input_n: 10
input: 4 7 3 6.1 9 1 5 4.1 6 0 
heap: 
0
1	3
6	4.1	4	5
7	6.1	9	
sort_heap: 0 1 3 4 4.1 5 6 6.1 7 9 
heap2: 
0
4	1
4.1	7	3	5
6.1	6	9	
sort_heap2: 0 1 3 4 4.1 5 6 6.1 7 9 
---- test sort_quick ----
input_n: 10
input: 4 7 3 6 9 1 0 4 6 4 
output: 0 1 3 4 4 4 6 6 7 9 
---- test sort_counting ----
input_n: 10
input: 40 70 30 60 90 10 0 50 80 40 
output: 0 10 30 40 40 50 60 70 80 90 
---- test sort_radix ----
input_n: 10
input: 40 70 30 60 90 10 0 50 80 40 
output: 0 10 30 40 40 50 60 70 80 90 
---- test sort_bucket ----
input_n: 10
input: 0.43 0.76 0.3 0.6 0.72 0.1 0 0.5 0.8 0.44 
output: 0 0.1 0.3 0.43 0.44 0.5 0.6 0.72 0.76 0.8 
---- test select_Xth ----
input_n: 10
input: 0.43 0.76 0.3 0.6 0.72 0.1 0 0.5 0.8 0.44 
2nd: 0.1
3rd: 0.3
9th: 0.76
---- test select_Xth_v2 ----
input_n: 10
input: 0.43 0.76 0.3 0.6 0.72 0.1 0 0.5 0.8 0.44 
2nd: 0.1
3rd: 0.3
9th: 0.76
---- test Stack ----
input_n: 10
input: 4 7 3 6.1 9 1 5 4.1 6 0 
pop: 0 6 4.1 5 1 9 6.1 3 7 4 
---- test Queue ----
input_n: 10
input: 4 7 3 6.1 9 1 5 4.1 6 0 
dequeue: 4 7 3 6.1 9 1 5 4.1 6 0 
---- test LinkedList ----
input_n: 10
input: [1]4 [22]7 [333]3 [4]6.1 [55]9 [666]1 [7]5 [8]4.1 [9]6 [32]0 
l[1]=4
l[22]=7
l[333]=3
l[4]=6.1
l[55]=9
l[666]=1
l[7]=5
l[8]=4.1
l[9]=6
l[32]=0
---- test ChainedHashTable ----
input_n: 10
input: [1]4 [22]7 [333]3 [4]6.1 [55]9 [666]1 [7]5 [8]4.1 [9]6 [32]0 
hash(1)=6   l[1]=4
hash(22)=5   l[22]=7
hash(333)=8   l[333]=3
hash(4)=4   l[4]=6.1
hash(55)=9   l[55]=9
hash(666)=6   l[666]=1
hash(7)=3   l[7]=5
hash(8)=9   l[8]=4.1
hash(9)=5   l[9]=6
hash(32)=7   l[32]=0
---- test HashTable ----
input_n: 10
input: [1]4 [22]7 [333]3 [4]6.1 [55]9 [666]1 [7]5 [8]4.1 [9]6 [32]0 
hash:8,9,10   l[1]=4
hash:7,3,12   l[22]=7
hash:10,5,0   l[333]=3
hash:6,10,1   l[4]=6.1
hash:12,2,5   l[55]=9
hash:7,10,0   l[666]=1
hash:4,11,5   l[7]=5
hash:12,7,2   l[8]=4.1
hash:7,3,12   l[9]=6
hash:10,3,9   l[32]=0
---- test BinarySearchTree ----
input_n: 8
input: 4 7 3 9 1 5 6 2 
after insert x5: 
1 3 4 7 9 
4 
3 7 
1 0 0 9 
finish insert: 
1 2 3 4 5 6 7 9 
4 
3 7 
1 0 5 9 
0 2 0 0 0 6 0 0 
search 5: 5
minimum: 1
maximum: 9
successor(5): 6
predecessor(5): 4
after remove 4: 
1 2 3 5 6 7 9 
3 
1 7 
0 2 5 9 
0 0 0 0 0 6 0 0 
after remove 3: 
1 2 5 6 7 9 
5 
1 7 
0 2 6 9 
after remove 5: 
1 2 6 7 9 
2 
1 7 
0 0 6 9 
---- test RBTree ----
input_n: 8
input: 1 2 3 5 6 7 4 8 
after insert 1: 
B1 
after insert 2: 
B1 
B0 R2 
after insert 3: 
B2 
R1 R3 
after insert 5: 
B2 
B1 B3 
B0 B0 B0 R5 
after insert 6: 
B2 
B1 B5 
B0 B0 R3 R6 
after insert 7: 
B2 
B1 R5 
B0 B0 B3 B6 
B0 B0 B0 B0 B0 B0 B0 R7 
after insert 4: 
B2 
B1 R5 
B0 B0 B3 B6 
B0 B0 B0 B0 B0 R4 B0 R7 
after insert 8: 
B2 
B1 R5 
B0 B0 B3 B7 
B0 B0 B0 B0 B0 R4 R6 R8 
sort: 1 2 3 4 5 6 7 8 
height: 4
black height: 2
search 5: 3
minimum: 1
maximum: 8
successor(5): 4
predecessor(5): 2
after remove 1: 
B5 
R3 B7 
B2 B4 R6 R8 
after remove 4: 
B5 
B3 B7 
R2 B0 R6 R8 
after remove 3: 
B5 
B2 B7 
B0 B0 R6 R8 
---- test cut_rod ----
input_n: 10
input: 1 5 8 9 10 17 17 20 28 30 
cut 10: 30
cut 11: 33
cut 27: 84
cut 36: 112
---- test LCS_length ----
input: ABCBDAB
       BDCABA
len: 4
input: ACCGGTCGAGTGCGCGGAAGCCGGCCGAA
       GTCGTTCGGAATGCCGTTGCTCTGTAAA
len: 20
---- test BTree ----
input_n: 25
input: W R P D Y S F J C Q U M B H N Z E I T G V O L K X 
after insert W: 
W 
after insert R: 
RW 
after insert P: 
PRW 
after insert D: 
DPRW 
after insert Y: 
DPRWY 
after insert S: 
R 
DPS WY 
after insert F: 
R 
DFPS WY 
after insert J: 
R 
DFJPS WY 
after insert C: 
JR 
CDF PS WY 
after insert Q: 
JR 
CDF PQS WY 
after insert U: 
JR 
CDF PQS UWY 
after insert M: 
JR 
CDF MPQS UWY 
after insert B: 
JR 
BCDF MPQS UWY 
after insert H: 
JR 
BCDFH MPQS UWY 
after insert N: 
JR 
BCDFH MNPQS UWY 
after insert Z: 
JR 
BCDFH MNPQS UWYZ 
after insert E: 
DJR 
BCE FH MNPQS UWYZ 
after insert I: 
DJR 
BCE FHI MNPQS UWYZ 
after insert T: 
DJR 
BCE FHI MNPQS TUWYZ 
after insert G: 
DJR 
BCE FGHI MNPQS TUWYZ 
after insert V: 
DJRW 
BCE FGHI MNPQS TUV YZ 
after insert O: 
DJPRW 
BCE FGHI MNO QS TUV YZ 
after insert L: 
P 
DJ RW 
BCE FGHI LMNO QS TUV YZ 
after insert K: 
P 
DJ RW 
BCE FGHI KLMNO QS TUV YZ 
after insert X: 
P 
DJ RW 
BCE FGHI KLMNO QS TUV XYZ 
search U: 20
search C: 2
search 2: 0
search P: 15
after remove M: 
DJPRW 
BCE FGHI KLNO QS TUV XYZ 
after remove R: 
DJPTW 
BCE FGHI KLNO QS UV XYZ 
after remove T: 
DJPW 
BCE FGHI KLNO QSUV XYZ 
---- test FibHeap ----
input_n: 25
input: W R P D Y S F J C Q U M B H N Z E I T G V O L K X 
finish insert: 
h: 
B(0) C(0) D(0) P(0) R(0) W(0) Y(0) S(0) F(0) J(0) Q(0) U(0) M(0) H(0) 
h2: 
E(0) N(0) Z(0) I(0) T(0) G(0) V(0) O(0) L(0) K(0) X(0) 
extract_min + insert: 
h: 
B(0) C(3) J(2) H(0) 
D(0) P(1) F(2) Q(0) M(1) 
R(0) S(0) W(1) U(0) 
Y(0) 
h2: 
E(0) G(3) K(1) 
V(0) L(1) I(2) X(0) 
O(0) T(0) N(1) 
Z(0) 
combine: 
B(0) C(3) J(2) H(0) E(0) G(3) K(1) 
D(0) P(1) F(2) Q(0) M(1) V(0) L(1) I(2) X(0) 
R(0) S(0) W(1) U(0) O(0) T(0) N(1) 
Y(0) Z(0) 
extract_min + insert: 
B(0) C(4) E(3) 
D(0) P(1) F(2) G(3) H(0) K(1) J(2) 
R(0) S(0) W(1) V(0) L(1) I(2) X(0) Q(0) M(1) 
Y(0) O(0) T(0) N(1) U(0) 
Z(0) 
remove R: 
B(0) C(4) E(3) 
D(0) P(0)* F(2) G(3) H(0) K(1) J(2) 
S(0) W(1) V(0) L(1) I(2) X(0) Q(0) M(1) 
Y(0) O(0) T(0) N(1) U(0) 
Z(0) 
remove N: 
B(1) C(4) E(3) 
Z(0) D(0) P(0)* F(2) G(3) H(0) K(1) J(2) 
S(0) W(1) V(0) L(1) I(1)* X(0) Q(0) M(1) 
Y(0) O(0) T(0) U(0) 
remove J: 
B(3) C(4) Q(0) 
Z(0) M(1) E(2) D(0) P(0)* F(2) G(3) 
U(0) H(0) K(1) S(0) W(1) V(0) L(1) I(1)* 
X(0) Y(0) O(0) T(0) 
remove F: 
B(4) Q(2) 
Z(0) M(1) E(2) C(3) S(0) W(1) 
U(0) H(0) K(1) G(3) D(0) P(0)* Y(0) 
X(0) V(0) L(1) I(1)* 
O(0) T(0) 
---- test ProtoVEB ----
sizeof(ProtoVEB<256>): 1020
input_n: 11
input: 10 20 30 40 50 60 70 80 90 100 110 
finish insert: 10 20 30 40 50 60 70 80 90 100 110 
minimum: 10
successor 30: 40
remove 30: 10 20 40 50 60 70 80 90 100 110 
---- test VEBTree ----
sizeof(VEBTree<15>): 120
sizeof(VEBTree<16>): 88
sizeof(VEBTree<127>): 1152
sizeof(VEBTree<128>): 1152
sizeof(VEBTree<255>): 2168
sizeof(VEBTree<256>): 1504
input_n: 11
input: 10 20 30 40 50 60 70 80 90 100 110 
finish insert: (Exist:)10 20 30 40 50 60 70 80 90 100 110 
finish remove: (Exist:)20 30 70 80 90 100 
minimum: 20
maximum: 100
successor 30: 70
insert 50 x3: (Exist:)20 30 50 70 80 90 100 
remove 50 x2: (Exist:)20 30 50 70 80 90 100 
remove 50 x1: (Exist:)20 30 70 80 90 100 
---- test Graph ----
Graph  : 0:0 (0,0):(0,0)
GraphW : 0:0 (0,0).w:20
is_directed: false
vertex_n: 10
edge_n: 9
edge_n of 2: 3
exist_vertex 2: true
exist_edge of 2: true
exist_edge of 2 and 4: false
exist_edge of 2 and 5: true
g.v(2).i: 2
g.e(2,5).i: 2
g.e(2,5).j: 5
traverse vertex:
0 1 2 3 4 5 6 7 8 9 
traverse edge:
(0,1) (0,2) (0,3) (1,4) (2,5) (2,6) (4,7) (6,8) (7,9) 
traverse edge of 2:
(2,0) (2,5) (2,6) 
remove edge(2,4):
(0,1) (0,2) (0,3) (1,4) (2,5) (2,6) (4,7) (6,8) (7,9) 
remove edge(2,5):
(0,1) (0,2) (0,3) (1,4) (2,6) (4,7) (6,8) (7,9) 
remove vertex 2:
0 1 2 3 4 5 6 7 8 
(0,1) (0,2) (1,3) (3,6) (5,7) (6,8) 
---- test BFS ----
Vertex: 0(1) 1(0) 2(2) 3(3) 4(2) 5(1) 6(2) 7(3) 
Edges: (0,4) (0,1) (1,5) (2,5) (2,6) (2,3) (3,6) (3,7) (5,6) (6,7) 
---- test DFS ----
Vertex: 0(1,8) 1(2,7) 2(9,12) 3(4,5) 4(3,6) 5(10,11) 
Edges: (0,1) (0,3) (1,4) (2,4) (2,5) (3,1) (4,3) (5,5) 
---- test topological_sort ----
sort: 8(手表) 5(衬衣) 6(领带) 1(袜子) 0(内裤) 2(裤子) 4(腰带) 7(夹克) 3(鞋) 
Edges: (0,2) (0,3) (1,3) (2,3) (2,4) (4,7) (5,4) (5,6) (6,7) 
---- test strongly_connected_components ----
0 1 4 
2 3 
5 6 
7 
Edges: (0,1) (1,4) (1,5) (1,2) (2,6) (2,3) (3,2) (3,7) (4,0) (4,5) (5,6) (6,5) (6,7) (7,7) 
---- test MST ----
before Edges : (0,1)(4) (0,7)(8) (1,2)(8) (1,7)(11) (2,3)(7) (2,8)(2) (2,5)(4) (3,4)(9) (3,5)(14) (4,5)(10) (5,6)(2) (6,7)(1) (6,8)(6) (7,8)(7) 
kruskal Edges: (0,1)(4) (0,7)(8) (2,8)(2) (2,5)(4) (2,3)(7) (3,4)(9) (5,6)(2) (6,7)(1) 
sum weight: 37
prim Edges   : (0,1)(4) (0,7)(8) (2,5)(4) (2,8)(2) (2,3)(7) (3,4)(9) (5,6)(2) (6,7)(1) 
sum weight: 37
---- test SP ----
Edges : (0,1)(10) (0,4)(5) (1,4)(2) (1,2)(1) (2,3)(4) (3,2)(6) (3,0)(7) (4,1)(3) (4,2)(9) (4,3)(2) 
bellman ford Vertex: 0(d=0,p_i=-1) 1(d=8,p_i=4) 2(d=9,p_i=1) 3(d=7,p_i=4) 4(d=5,p_i=0) 
dijkstra Vertex    : 0(d=0,p_i=-1) 1(d=8,p_i=4) 2(d=9,p_i=1) 3(d=7,p_i=4) 4(d=5,p_i=0) 
---- test SP_directed_acyclic ----
Edges : (0,1)(5) (0,2)(3) (1,2)(2) (1,3)(6) (2,3)(7) (2,4)(4) (2,5)(2) (3,4)(-1) (3,5)(1) (4,5)(-2) 
directed acyclic Vertex: 0(d=268435455,p_i=-1) 1(d=0,p_i=-1) 2(d=2,p_i=1) 3(d=6,p_i=1) 4(d=5,p_i=3) 5(d=3,p_i=4) 
---- test APSP ----
weight : w(0,0)=0 w(0,1)=3 w(0,2)=8 w(0,4)=-4 w(1,1)=0 w(1,3)=1 w(1,4)=7 w(2,1)=4 w(2,2)=0 w(3,0)=2 w(3,2)=-5 w(3,3)=0 w(4,3)=6 w(4,4)=0 
slow distance : 
d(0,0)=0 d(0,1)=1 d(0,2)=-3 d(0,3)=2 d(0,4)=-4 
d(1,0)=3 d(1,1)=0 d(1,2)=-4 d(1,3)=1 d(1,4)=-1 
d(2,0)=7 d(2,1)=4 d(2,2)=0 d(2,3)=5 d(2,4)=3 
d(3,0)=2 d(3,1)=-1 d(3,2)=-5 d(3,3)=0 d(3,4)=-2 
d(4,0)=8 d(4,1)=5 d(4,2)=1 d(4,3)=6 d(4,4)=0 
faster distance : 
d(0,0)=0 d(0,1)=1 d(0,2)=-3 d(0,3)=2 d(0,4)=-4 
d(1,0)=3 d(1,1)=0 d(1,2)=-4 d(1,3)=1 d(1,4)=-1 
d(2,0)=7 d(2,1)=4 d(2,2)=0 d(2,3)=5 d(2,4)=3 
d(3,0)=2 d(3,1)=-1 d(3,2)=-5 d(3,3)=0 d(3,4)=-2 
d(4,0)=8 d(4,1)=5 d(4,2)=1 d(4,3)=6 d(4,4)=0 
floyd warshall distance : 
d(0,0)=0 d(0,1)=1 d(0,2)=-3 d(0,3)=2 d(0,4)=-4 
d(1,0)=3 d(1,1)=0 d(1,2)=-4 d(1,3)=1 d(1,4)=-1 
d(2,0)=7 d(2,1)=4 d(2,2)=0 d(2,3)=5 d(2,4)=3 
d(3,0)=2 d(3,1)=-1 d(3,2)=-5 d(3,3)=0 d(3,4)=-2 
d(4,0)=8 d(4,1)=5 d(4,2)=1 d(4,3)=6 d(4,4)=0 
---- test APSP_johnson ----
weight : w(0,0)=0 w(0,1)=3 w(0,4)=-4 w(0,2)=8 w(1,1)=0 w(1,3)=1 w(1,4)=7 w(2,2)=0 w(2,1)=4 w(3,3)=0 w(3,2)=-5 w(3,0)=2 w(4,4)=0 w(4,3)=6 
johnson distance : 
d(0,0)=0 d(0,1)=1 d(0,2)=-3 d(0,3)=2 d(0,4)=-4 
d(1,0)=3 d(1,1)=0 d(1,2)=-4 d(1,3)=1 d(1,4)=-1 
d(2,0)=7 d(2,1)=4 d(2,2)=0 d(2,3)=5 d(2,4)=3 
d(3,0)=2 d(3,1)=-1 d(3,2)=-5 d(3,3)=0 d(3,4)=-2 
d(4,0)=8 d(4,1)=5 d(4,2)=1 d(4,3)=6 d(4,4)=0 
---- test flow ----
edmonds karp max flow: 23
(0,1)(12/16) (0,2)(11/13) (1,3)(12/12) (2,1)(0/4) (2,4)(11/14) (3,2)(0/9) (3,5)(19/20) (4,3)(7/7) (4,5)(4/4) 
push relabel max flow: 23
(0,1)(12/16) (0,2)(11/13) (1,3)(12/12) (2,1)(0/4) (2,4)(11/14) (3,2)(0/9) (3,5)(19/20) (4,3)(7/7) (4,5)(4/4) 
